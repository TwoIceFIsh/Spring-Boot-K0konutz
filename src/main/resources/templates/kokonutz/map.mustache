<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Kakao 지도 시작하기</title>
    <script src="//code.jquery.com/jquery-1.12.0.min.js"></script>

</head>
<body>
<div id="map" style="width:500px;height:400px;"></div>
<script type="text/javascript"
        src="//dapi.kakao.com/v2/maps/sdk.js?appkey=88ebb8c53a6311255103e83df3dda05c&libraries=services,clusterer,drawing"></script>

<script>
    let path = [];
    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
            };

    var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다


    fetch("/map/json/si.json")
            .then(response => {
                return response.json();
            })
            .then(jsondata => {

                // 행정구역 갯수 인
                let mapNumber = jsondata.features.length;
                // console.log(mapNumber);

                // 행정구역 명칭 획득
                for (let i = 0; i < mapNumber; i++) {
                    console.log(jsondata.features[i].properties.CTP_KOR_NM);
                    let cities = ['서울특별시', '대구광역시', '광주광역시', '대전광역시', '충청북도', '울산광역시', '세종특별자치시'];
                    if (cities.includes(jsondata.features[i].properties.CTP_KOR_NM)) {

                        // A 타입 좌표
                        for (let j = 0; j < jsondata.features[i].geometry.coordinates.length; j++) {
                            //console.log(jsondata.features[i].geometry.coordinates[j]);

                            for (let k = 0; k < jsondata.features[i].geometry.coordinates[j].length; k++) {
                                console.log(jsondata.features[i].geometry.coordinates[j][k]);
                                path.push(new kakao.maps.LatLng(jsondata.features[i].geometry.coordinates[j][k][0], jsondata.features[i].geometry.coordinates[j][k][1]));
                            }
                        }
                    } else {

                        // B 타입 좌표
                        for (let j = 0; j < jsondata.features[i].geometry.coordinates.length; j++) {
                            //console.log(jsondata.features[i].geometry.coordinates[j]);

                            for (let k = 0; k < jsondata.features[i].geometry.coordinates[j].length; k++) {
                                //console.log(jsondata.features[i].geometry.coordinates[j][k]);
                                for (let l = 0; l < jsondata.features[i].geometry.coordinates[j][k].length; l++) {
                                    console.log(jsondata.features[i].geometry.coordinates[j][k][l][0]);
                                    path.push(new kakao.maps.LatLng(jsondata.features[i].geometry.coordinates[j][k][l][0], jsondata.features[i].geometry.coordinates[j][k][l][1]));
                                }
                            }
                        }
                    }

                }

            });
    console.log(JSON.stringify(path));

    // 다각형을 구성하는 좌표 배열입니다. 이 좌표들을 이어서 다각형을 표시합니다
    var polygonPath = [
        new kakao.maps.LatLng(33.45133510810506, 126.57159381623066),
        new kakao.maps.LatLng(33.44955812811862, 126.5713551811832),
        new kakao.maps.LatLng(33.449986291544086, 126.57263296172184),
        new kakao.maps.LatLng(33.450682513554554, 126.57321034054742),
        new kakao.maps.LatLng(33.451346760004206, 126.57235740081413)
    ];

    // 지도에 표시할 다각형을 생성합니다
    var polygon = new kakao.maps.Polygon({
        path: path, // 그려질 다각형의 좌표 배열입니다
        strokeWeight: 3, // 선의 두께입니다
        strokeColor: '#39DE2A', // 선의 색깔입니다
        strokeOpacity: 0.8, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: 'longdash', // 선의 스타일입니다
        fillColor: '#A2FF99', // 채우기 색깔입니다
        fillOpacity: 0.7 // 채우기 불투명도 입니다
    });

    // 지도에 다각형을 표시합니다
    polygon.setMap(map);


</script>
</body>
</html>